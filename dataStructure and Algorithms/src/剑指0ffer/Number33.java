import java.util.ArrayList;

/**
 * @author goodtime
 * @create 2020-01-22 6:00 下午
 */
public class Number33 {
    public static void main(String[] args) {
        Solution33 solution33 = new Solution33();
        System.out.println(solution33.GetUglyNumber_Solution(3));
    }
}
//丑数，它的质因子只包含2，3，5，第一个丑数默认为1

/**
 * 链接：https://www.nowcoder.com/questionTerminal/6aa9e04fc3794f68acf8778237ba065b?f=discussion
 * 来源：牛客网
 *
 * 通俗易懂的解释：
 * 首先从丑数的定义我们知道，一个丑数的因子只有2,3,5，那么丑数p = 2 ^ x * 3 ^ y * 5 ^ z，换句话说一个丑数一定由另一个丑数乘以2或者乘以3或者乘以5得到，那么我们从1开始乘以2,3,5，就得到2,3,5三个丑数，在从这三个丑数出发乘以2,3,5就得到4，6,10,6，9,15,10,15,25九个丑数，我们发现这种方***得到重复的丑数，而且我们题目要求第N个丑数，这样的方法得到的丑数也是无序的。那么我们可以维护三个队列：
 * （1）丑数数组： 1
 * 乘以2的队列：2
 * 乘以3的队列：3
 * 乘以5的队列：5
 * 选择三个队列头最小的数2加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
 * （2）丑数数组：1,2
 * 乘以2的队列：4
 * 乘以3的队列：3，6
 * 乘以5的队列：5，10
 * 选择三个队列头最小的数3加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
 * （3）丑数数组：1,2,3
 * 乘以2的队列：4,6
 * 乘以3的队列：6,9
 * 乘以5的队列：5,10,15
 * 选择三个队列头里最小的数4加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
 * （4）丑数数组：1,2,3,4
 * 乘以2的队列：6，8
 * 乘以3的队列：6,9,12
 * 乘以5的队列：5,10,15,20
 * 选择三个队列头里最小的数5加入丑数数组，同时将该最小的数乘以2,3,5放入三个队列；
 * （5）丑数数组：1,2,3,4,5
 * 乘以2的队列：6,8,10，
 * 乘以3的队列：6,9,12,15
 * 乘以5的队列：10,15,20,25
 * 选择三个队列头里最小的数6加入丑数数组，但我们发现，有两个队列头都为6，所以我们弹出两个队列头，同时将12,18,30放入三个队列；
 *
 *
 * 下面的实现，是基于这种三指针的思路的。每个数组开始的数为1，1，1，但其实比较的时候，分别乘2、3和5，相当于开始数为2、3、5，然后开始取最小的数
 * 如果采用了乘2中的数，那么乘2的指针就往下走，挪到当前最小的数的位置，下次比较，就是4、3和5分别比较。
 * 选中3，所以乘3的指针挪到值为2的位置。这样很方便地实现了三个数组的思路，而且不用每次移到下一值，就分别乘2、3、5存。
 * 同时注意，如果有个数正好等于两个队列的值，比如2*3和3*2，就让他们俩的指针同时后移。
 */
class Solution33 {
    public int GetUglyNumber_Solution(int index) {
        if(index < 1) {
            return 0;
        }
        int i = 0;//乘2的队列下标，初始值都指向1
        int j = 0;//乘3的队列下标
        int k = 0;//乘5的队列下标
        int l ;//表示主队列第几个元素
        ArrayList<Integer> ints = new ArrayList<Integer>();
        ints.add(1);
        int temp = 1;
        for (l = 2; l <= index; l++) {//l表示给ints中添加第l个元素（l从1开始数）
            temp = ints.get(i) * 2 < ints.get(j) * 3? ints.get(i) * 2 : ints.get(j)*3;
            temp = temp < ints.get(k)*5 ? temp : ints.get(k)*5;
            ints.add(temp);
            if(temp == ints.get(i) * 2){
                i++;
            }
            if(temp == ints.get(j) * 3){
                j++;
            }
            if(temp == ints.get(k) * 5){
                k++;
            }
        }
        return temp;
    }
}