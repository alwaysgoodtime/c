<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
    <display-name>Archetype Created Web Application</display-name>


    <!--配置解决中文乱码的过滤器，get请求乱码的终极解决办法是：在tomcat的server.xml中配置我们的服务端口URIEncoding="utf-8"-->
    <!--一般过滤器写在servlet上面，当然，执行顺序和书写顺序无关，只是这样idea不会报错而已-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <!--解决请求乱码：其实就是request.setCharacterEncoding(encoding);-->
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <!-- 顺手解决响应乱码：就是response.setCharacterEncoding(encoding)，默认为false,配置的话，请求和响应都是utf-8了-->
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--在web中配置servlet，相当于以前在javawev中用@webServlet注解,让这个DispatcherServlet加载mvc的xml配置文件-->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--让这个DispatcherServlet初始化时，加载mvc的xml配置文件-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--servlet正常是请求过来时，我们才创建servlet类，load-on-startup，表示服务器一启动，就会创建该类，自然，它初始化时，就会加载mvc配置文件-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <!--  servlet配置两件套，一个是名字，和对应的类，一个是名字，与处理的请求，/表示拦截所有请求，但等级没有/*高-->
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

</web-app>
